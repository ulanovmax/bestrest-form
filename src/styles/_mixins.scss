@use 'sass:math';
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

$maxWidth: 1440;
$maxWidthContainer: 1280;
$phoneWidth: 360;
$phoneWidthFontSize: 768;

@mixin media($width) {
    @media only screen and (max-width: "#{$width}px") {
        @content;
    }
}

@mixin min-media($width) {
    @media only screen and (min-width: "#{$width}px") {
        @content;
    }
}

// Clear bg when autocomplete to transparent
@mixin transparent-bg-input($color) {
    &:-webkit-autofill,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus,
    &:-webkit-autofill:active {
        transition: background-color 5000s ease-in-out 0s;
        -webkit-text-fill-color: $color !important;
    }
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return math.div($number, ($number * 0 + 1));
    }

    @return $number;
}

@function ac(
    $startSize,
    $minSize,
    $minBreakPoint: $phoneWidth,
    $startBreakPoint: $maxWidth,
    $flag: false
) {
    $difference: $startSize - $minSize;
    $addSize: strip-unit($difference);

    @if $difference > 0 {
        @if $flag == false {
            @return min(
                max(
                    calc(
                        #{$minSize} + #{$addSize} *
                            (
                                (100vw - #{$minBreakPoint}px) / #{$startBreakPoint -
                                    $minBreakPoint}
                            )
                    ),
                    $minSize
                ),
                $startSize
            );
        } @else {
            @return min(
                max(
                    calc(
                        #{$minSize} + #{$addSize} *
                            (
                                (100vw - #{$minBreakPoint}px) / #{$maxWidthContainer -
                                    $minBreakPoint}
                            )
                    ),
                    $minSize
                ),
                $startSize
            );
        }
    } @else {
        @if $flag == false {
            @return min(
                max(
                    calc(
                        #{$minSize} + #{$addSize} *
                            (
                                (100vw - #{$minBreakPoint}px) / #{$startBreakPoint -
                                    $minBreakPoint}
                            )
                    ),
                    $startSize
                ),
                $minSize
            );
        } @else {
            @return min(
                max(
                    calc(
                        #{$minSize} + #{$addSize} *
                            (
                                (100vw - #{$minBreakPoint}px) / #{$maxWidthContainer -
                                    $minBreakPoint}
                            )
                    ),
                    $startSize
                ),
                $minSize
            );
        }
    }
}

@mixin max-line-leng($num-of-rows) {
    @if $num-of-rows == 1 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    } @else {
        padding: 0 !important;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
        -webkit-line-clamp: $num-of-rows;
    }
}

@function perc($number1, $number2: 1920) {
    @return percentage(math.div($number1, $number2));
}

@function vw($number1, $number2: 1920) {
    @return math.div($number1 * 100, $number2) * 1vw;
}

@mixin aspect-ratio($photoWidth, $photoHeight) {
    width: 100%;
    height: 0;
    position: relative;
    padding: {
        bottom: perc($photoHeight, $photoWidth);
    }
    overflow: hidden;

    img,
    iframe,
    video {
        width: 100%;
        height: 100%;
        position: absolute;
        object-fit: cover;
    }
}
